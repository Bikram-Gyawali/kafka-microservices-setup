version: '3.7'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "true"  # Allow leader election to prevent unavailability
    networks:
      - app-network

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
      POSTGRES_HOST: postgres
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app-network

  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    restart: always
    depends_on:
      - kafka
      - postgres
    ports:
      - "3000:3000"
    environment:
      KAFKA_BROKER: kafka:9092
      POSTGRES_HOST: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
      - app-network

  service-a:
    build: ./service-a
    container_name: service-a
    restart: always
    depends_on:
      - kafka
      - postgres
      - api-gateway
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - app-network

  service-b:
    build: ./service-b
    container_name: service-b
    restart: always
    depends_on:
      - kafka
      - postgres
      - api-gateway
    environment:
      KAFKA_BROKER: kafka:9092
    networks:
      - app-network

volumes:
  kafka_data:
  pg_data:

networks:
  app-network:
    driver: bridge